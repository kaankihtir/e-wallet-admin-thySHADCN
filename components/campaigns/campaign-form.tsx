"use client"

import { useState } from "react"
import { z } from "zod"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { CalendarIcon, Plus, Trash2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Switch } from "@/components/ui/switch"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { Calendar } from "@/components/ui/calendar"
import { Checkbox } from "@/components/ui/checkbox"
import { Separator } from "@/components/ui/separator"
import { format } from "date-fns"
import { cn } from "@/lib/utils"

// Constants for the form
const CURRENCIES = [
  { label: "Turkish Lira", value: "TRY" },
  { label: "US Dollar", value: "USD" },
  { label: "Euro", value: "EUR" },
  { label: "British Pound", value: "GBP" },
]

const TARGET_KEYS = [
  { label: "Merchant ID", value: "merchant_id" },
  { label: "Transaction Type", value: "transaction_type" },
  { label: "User Segment", value: "user_segment" },
  { label: "Product Category", value: "product_category" },
  { label: "Transaction Amount", value: "transaction_amount" },
  { label: "Location", value: "location" },
]

const TARGET_OPERATORS = [
  { label: "Equals", value: "EQUALS" },
  { label: "In", value: "IN" },
]

// Form schema
const campaignFormSchema = z.object({
  name: z.string().min(3, { message: "Name must be at least 3 characters" }),
  startDate: z.date({ required_error: "Start date is required" }),
  endDate: z.date().optional(),
  hasEndDate: z.boolean().default(true),
  currency: z.string({ required_error: "Currency is required" }),
  cashbackType: z.enum(["PERCENTAGE", "AMOUNT"], {
    required_error: "Cashback type is required",
  }),
  cashbackValue: z.string().min(1, { message: "Cashback value is required" }),
  maximumCashback: z.string().optional(),
  targets: z.array(
    z.object({
      key: z.string(),
      operator: z.string(),
      value: z.string(),
      logicOperator: z.enum(["AND", "OR"]).optional(),
    })
  ).min(1, { message: "At least one target must be defined" }),
})

type CampaignFormValues = z.infer<typeof campaignFormSchema>

interface CampaignFormProps {
  initialData?: Partial<CampaignFormValues>;
  onSubmit: (data: CampaignFormValues) => void;
  onCancel: () => void;
}

export function CampaignForm({ initialData, onSubmit, onCancel }: CampaignFormProps) {
  // Campaign ID is generated by the system and is read-only
  const campaignId = initialData?.name 
    ? `CAM-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}` 
    : `CAM-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;

  const form = useForm<CampaignFormValues>({
    resolver: zodResolver(campaignFormSchema),
    defaultValues: {
      name: initialData?.name || "",
      startDate: initialData?.startDate || new Date(),
      endDate: initialData?.endDate,
      hasEndDate: initialData?.hasEndDate ?? true,
      currency: initialData?.currency || "",
      cashbackType: initialData?.cashbackType || "PERCENTAGE",
      cashbackValue: initialData?.cashbackValue || "",
      maximumCashback: initialData?.maximumCashback || "",
      targets: initialData?.targets || [
        { key: "", operator: "EQUALS", value: "" }
      ],
    },
  })

  const watchHasEndDate = form.watch("hasEndDate")
  const watchCashbackType = form.watch("cashbackType")
  const watchTargets = form.watch("targets")

  // Add a new target
  const addTarget = () => {
    const currentTargets = form.getValues("targets");
    form.setValue("targets", [
      ...currentTargets,
      { key: "", operator: "EQUALS", value: "", logicOperator: "AND" }
    ]);
  };

  // Remove a target
  const removeTarget = (index: number) => {
    const currentTargets = form.getValues("targets");
    form.setValue(
      "targets",
      currentTargets.filter((_, i) => i !== index)
    );
  };

  // Update target logic operator
  const updateTargetLogicOperator = (index: number, value: "AND" | "OR") => {
    const currentTargets = form.getValues("targets");
    const updatedTargets = [...currentTargets];
    updatedTargets[index] = { ...updatedTargets[index], logicOperator: value };
    form.setValue("targets", updatedTargets);
  };

  const onSubmitForm = (data: CampaignFormValues) => {
    // Remove logic operator from the last target as it's not needed
    const formattedData = {
      ...data,
      targets: data.targets.map((target, index) => {
        if (index === data.targets.length - 1) {
          const { logicOperator, ...rest } = target;
          return rest;
        }
        return target;
      }),
    };
    
    onSubmit(formattedData);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmitForm)} className="space-y-8">
        <div className="grid gap-6">
          {/* Campaign ID (read-only) */}
          <Card>
            <CardHeader>
              <CardTitle>Campaign Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="campaignId">Campaign ID</Label>
                  <Input 
                    id="campaignId" 
                    value={campaignId} 
                    disabled 
                    className="bg-muted"
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    Automatically generated by the system
                  </p>
                </div>
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Campaign Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter campaign name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </CardContent>
          </Card>

          {/* Campaign Details */}
          <Card>
            <CardHeader>
              <CardTitle>Campaign Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Date Range */}
              <div className="space-y-2">
                <h3 className="text-sm font-medium">Campaign Period</h3>
                <div className="flex items-end space-x-4">
                  <div className="flex-1">
                    <FormField
                      control={form.control}
                      name="startDate"
                      render={({ field }) => (
                        <FormItem className="space-y-1">
                          <FormLabel>Start Date</FormLabel>
                          <Popover>
                            <PopoverTrigger asChild>
                              <FormControl>
                                <Button
                                  variant={"outline"}
                                  className={cn(
                                    "w-full pl-3 text-left font-normal",
                                    !field.value && "text-muted-foreground"
                                  )}
                                >
                                  {field.value ? (
                                    format(field.value, "MMM d, yyyy")
                                  ) : (
                                    <span>Pick a date</span>
                                  )}
                                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                </Button>
                              </FormControl>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                              <Calendar
                                mode="single"
                                selected={field.value}
                                onSelect={field.onChange}
                                disabled={(date) =>
                                  date < new Date(new Date().setHours(0, 0, 0, 0))
                                }
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                      <FormLabel>End Date</FormLabel>
                      <div className="flex items-center space-x-2">
                        <Switch
                          id="has-end-date"
                          checked={watchHasEndDate}
                          onCheckedChange={(checked) => {
                            form.setValue("hasEndDate", checked);
                            if (!checked) {
                              form.setValue("endDate", undefined);
                            }
                          }}
                        />
                        <span className="text-xs text-muted-foreground">
                          {watchHasEndDate ? "Specified" : "Ongoing"}
                        </span>
                      </div>
                    </div>

                    {watchHasEndDate && (
                      <FormField
                        control={form.control}
                        name="endDate"
                        render={({ field }) => (
                          <FormItem>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={"outline"}
                                    className={cn(
                                      "w-full pl-3 text-left font-normal",
                                      !field.value && "text-muted-foreground"
                                    )}
                                  >
                                    {field.value ? (
                                      format(field.value, "MMM d, yyyy")
                                    ) : (
                                      <span>Pick a date</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                  mode="single"
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  disabled={(date) =>
                                    date <= form.getValues("startDate")
                                  }
                                  initialFocus
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}
                  </div>
                </div>
              </div>

              <Separator />

              {/* Currency */}
              <div className="space-y-2">
                <h3 className="text-sm font-medium">Currency</h3>
                <FormField
                  control={form.control}
                  name="currency"
                  render={({ field }) => (
                    <FormItem>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select currency" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {CURRENCIES.map((currency) => (
                            <SelectItem key={currency.value} value={currency.value}>
                              {currency.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <Separator />

              {/* Cashback Details */}
              <div className="space-y-4">
                <h3 className="text-sm font-medium">Cashback Details</h3>
                <div className="grid grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="cashbackType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Cashback Type</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select cashback type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="PERCENTAGE">Percentage</SelectItem>
                            <SelectItem value="AMOUNT">Fixed Amount</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="cashbackValue"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>
                          {watchCashbackType === "PERCENTAGE" ? "Percentage Value" : "Amount Value"}
                        </FormLabel>
                        <FormControl>
                          <div className="flex">
                            <Input
                              {...field}
                              type="number"
                              min="0"
                              step={watchCashbackType === "PERCENTAGE" ? "0.01" : "1"}
                              placeholder={
                                watchCashbackType === "PERCENTAGE"
                                  ? "Enter percentage (e.g. 5)"
                                  : "Enter amount"
                              }
                            />
                            <div className="ml-2 flex items-center px-3 border rounded-md bg-muted">
                              {watchCashbackType === "PERCENTAGE" ? "%" : form.getValues("currency") || ""}
                            </div>
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maximumCashback"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Maximum Cashback Limit</FormLabel>
                        <FormControl>
                          <div className="flex">
                            <Input
                              {...field}
                              type="number"
                              min="0"
                              placeholder="Optional limit"
                            />
                            <div className="ml-2 flex items-center px-3 border rounded-md bg-muted">
                              {form.getValues("currency") || ""}
                            </div>
                          </div>
                        </FormControl>
                        <FormDescription>
                          Leave empty for no limit
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Target Details */}
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Target Criteria</CardTitle>
              <Button 
                type="button" 
                variant="outline" 
                size="sm" 
                onClick={addTarget}
              >
                <Plus className="h-4 w-4 mr-2" /> Add Target
              </Button>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-4">
                {watchTargets.map((target, index) => (
                  <div key={index} className="space-y-2">
                    {index > 0 && (
                      <div className="flex justify-center mb-2">
                        <Select
                          value={target.logicOperator || "AND"}
                          onValueChange={(value) => 
                            updateTargetLogicOperator(index, value as "AND" | "OR")
                          }
                        >
                          <SelectTrigger className="w-24">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="AND">AND</SelectItem>
                            <SelectItem value="OR">OR</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    )}
                    
                    <div className="flex items-start space-x-2">
                      <div className="grid grid-cols-3 gap-2 flex-1">
                        <FormField
                          control={form.control}
                          name={`targets.${index}.key`}
                          render={({ field }) => (
                            <FormItem>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Select key" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {TARGET_KEYS.map((key) => (
                                    <SelectItem key={key.value} value={key.value}>
                                      {key.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name={`targets.${index}.operator`}
                          render={({ field }) => (
                            <FormItem>
                              <Select
                                onValueChange={field.onChange}
                                defaultValue={field.value}
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Operator" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {TARGET_OPERATORS.map((operator) => (
                                    <SelectItem key={operator.value} value={operator.value}>
                                      {operator.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        <FormField
                          control={form.control}
                          name={`targets.${index}.value`}
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Input placeholder="Value" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      {watchTargets.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeTarget(index)}
                          className="h-10 w-10"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
              
              <FormField
                control={form.control}
                name="targets"
                render={() => (
                  <FormItem>
                    <FormDescription>
                      Define target criteria for when this campaign should be applied.
                      You can combine multiple criteria with AND/OR logic.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>
        </div>

        <div className="flex justify-end space-x-4">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit">
            {initialData?.name ? "Save Changes" : "Create Campaign"}
          </Button>
        </div>
      </form>
    </Form>
  )
} 